@inject IJSRuntime JSRuntime
<div class="flex flex-col gap-4">
    <button class="botao" @onclick=CaptureAndSavePhotoAsync>Clique para tirar uma imagem</button>
    <button class="botao" @onclick=EnviarFoto>Processar</button>
<p>Texto processado:</p>
<p>@TextoRetirado</p>

</div>
@code {
    string base64 = "";
    string TextoRetirado = "";
    public async void CaptureAndSavePhotoAsync()
    {
        if (MediaPicker.IsCaptureSupported)
        {
            try
            {
                FileResult photo = await MediaPicker.CapturePhotoAsync();

                if (photo != null)
                {
                    // Salve o arquivo em um local específico e retorne o caminho
                    Stream stream = await photo.OpenReadAsync();
                    byte[] bytes;
                    using (var memoryStream = new MemoryStream())
                    {
                        stream.CopyTo(memoryStream);
                        bytes = memoryStream.ToArray();
                    }

                     base64 = Convert.ToBase64String(bytes);
                }
            }
            catch (Exception ex)
            {
                // Lidar com exceções, se ocorrerem durante a captura
                await JSRuntime.InvokeVoidAsync("showAlert", $"Erro ao capturar a foto: {ex.Message}");
            }
        }
    }
    private async Task<string> SavePhotoToLocalDirectoryAsync(FileResult photo)
    {
        string localFilePath = Path.Combine(FileSystem.CacheDirectory, photo.FileName);

        using Stream sourceStream = await photo.OpenReadAsync();
        using FileStream localFileStream = File.OpenWrite(localFilePath);

        await sourceStream.CopyToAsync(localFileStream);
        return localFilePath;
    }
    private async Task EnviarFoto()
    {
        string url = Preferences.Default.Get("url", "");
        TextoRetirado = await ImageManager.UploadPhotoAsync(base64, $"{url}/api/text-extractor");
    }
}
